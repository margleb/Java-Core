/*
Модификаторы:
native (от англ. native — родной, естественный, первичный) — этот модификатор, используется исключительно с методами и указывает на то, что он (метод) реализуется на платформозависимом коде, обычно написаном на другом языке программирования, например C, C++, ASSEMBLER и не имеет тела, аналогично абстрактному методу.
Модификатор strictfp (strict floating point) применяется к классам, интерфейсам и методам, и гарантирует соответствие всех операций на числах с плавающей точкой стандарту IEEE 754.
Synchronized (с англ. "синхронизированный") - это ключевое слово, которое позволяет заблокировать доступ к методу или части кода, если его уже использует другой поток.
abstract - используются для абстрактных классов и не имеют никакого функционала
Модификатор final — используется для завершения реализации классов, методов и переменных.
Модификатор static — применяется для создания методов и переменных класса

Произвольное количество аргументов (varargs) -  это означает, что в качестве аргумента (ов) для этого метода могут быть переданы ноль или более объектов String (или их массив)
// допускается передача только одного varargs!!
// varargs должен идти последним аргументом!!

 */

public class Example {
    int i = 5;
    static int z = 10;
    // final void finalMethod() {
    // }
    // допускается передача только одного varargs!!
    // varargs может быть только послединим аргументов!!
    static void method(int i, float f, boolean b, Object o, String s, int... j) {
       // статические методы не могут получить доступ не к статическим полям
       // System.out.println(i);
       System.out.println(z);

       // аргументы
       System.out.println(i);
       System.out.println(f);
       System.out.println(b);
       System.out.println(o);
       System.out.println(s);

       // передаваемый массива
       for(int p: j) {
           System.out.println(p);
       }
    }

    // Возращает обьект
    static Object method() {
        return new Object();
    }

}

class OtherExample extends Example {
    // метод final и не может быть переопределен
    // @Override
    // void finalMethod() {
    // }
    public static void main(String[] args) {
        // статический метод не требует создания экз.класса
        Example.method(5, 4.234f, true, new Object(), "gleb", 4,5,6,7,8,9,0);
        System.out.println(Example.method());
    }

}
